{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withLoginRedirect.jsx","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToProps","state","isLogin","auth","withAuthRedirect","Component","loginRedirect","this","props","to","React","connect","Dialog","path","id","className","styles","dialog","activeClassName","active","name","Message","message","maxLength10","maxLengthValidator","SendNewMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredValidator","Dialogs","dialogs","map","d","key","messages","m","wrapper","dialogsWrapper","messagesWrapper","formData","sendNewMessage","newMessage","DialogsContainer","compose","dialogPage","dispatch","addNewDialogActionCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,eAAiB,gCAAgC,gBAAkB,iCAAiC,OAAS,0B,sICG9JC,EAAkB,SAACC,GACnB,MAAO,CACHC,QAASD,EAAME,KAAKD,UAIfE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,uKAKnC,OAAKC,KAAKC,MAAMN,QACT,kBAACG,EAAcE,KAAKC,OADK,kBAAC,IAAD,CAAUC,GAAG,eALV,GAEfC,IAAML,WAUlC,OAF6BM,YAAQX,EAARW,CAAyBL,K,qFCL3CM,EAXA,SAACJ,GAEZ,IAAIK,EAAO,aAAeL,EAAMM,GAEhC,OACI,yBAAKC,UAAWC,IAAOC,QACvB,kBAAC,IAAD,CAASR,GAAII,EAAOK,gBAAiBF,IAAOG,QAASX,EAAMY,QCHpDC,EAJC,SAACb,GACb,OAAO,yBAAKO,UAAWC,IAAOM,SAAUd,EAAMc,U,kCCkC5CC,EAAcC,YAAmB,IAWjCC,EAA0BC,YAAU,CAAEC,KAAM,mBAAlBD,EATL,SAAClB,GACxB,OACI,0BAAMoB,SAAUpB,EAAMqB,cAClB,6BAAK,kBAACC,EAAA,EAAD,CAAOV,KAAK,aAAaW,UAAWC,IAAUC,SAAU,CAACC,IAAmBX,MACjF,oDAQGY,EAtCC,SAAC3B,GACb,IAAI4B,EAAU5B,EAAMP,MAAMmC,QAAQC,KAAK,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAQxB,GAAIwB,EAAExB,GAAIyB,IAAKD,EAAExB,GAAIM,KAAMkB,EAAElB,UAE7EoB,EAAWhC,EAAMP,MAAMuC,SAASH,KAAK,SAAAI,GAAC,OAAI,kBAAC,EAAD,CAASnB,QAASmB,EAAEnB,QAASiB,IAAKE,EAAE3B,QAQlF,OACI,yBAAKC,UAAWC,IAAO0B,SACnB,yBAAK3B,UAAWC,IAAO2B,gBACjBP,GAEN,yBAAKrB,UAAWC,IAAO4B,iBACjBJ,EACF,kBAACf,EAAD,CAAyBG,SAZtB,SAACiB,GACZrC,EAAMsC,eAAeD,EAASE,kB,gCCEhCC,EAAmBC,YACrBtC,aAfoB,SAACV,GACrB,MAAO,CACHA,MAAOA,EAAMiD,eAIM,SAACC,GACxB,MAAO,CACHL,eAAgB,SAACxB,GACb6B,EAASC,YAA0B9B,SAO3ClB,IAFqB6C,CAGvBd,GAMaa","file":"static/js/3.98b0c52b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dialogs_wrapper__fCccp\",\"dialogsWrapper\":\"Dialogs_dialogsWrapper__1JPd2\",\"messagesWrapper\":\"Dialogs_messagesWrapper__UC4Do\",\"active\":\"Dialogs_active__3OII_\"};","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isLogin: state.auth.isLogin\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class loginRedirect extends React.Component {\r\n\r\n        render() {\r\n            if (!this.props.isLogin) return <Redirect to='/login' />\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let connectedLoginRedirect = connect(mapStateToProps)(loginRedirect);\r\n\r\n    return connectedLoginRedirect\r\n\r\n}\r\n","import React from 'react';\r\nimport styles from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Dialog = (props) => {\r\n\r\n    let path = '/messages/' + props.id;\r\n\r\n    return (\r\n        <div className={styles.dialog}>\r\n        <NavLink to={path}  activeClassName={styles.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport styles from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={styles.message}>{props.message}</div>\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport styles from './Dialogs.module.css';\r\n\r\nimport Dialog from './Dialog/Dialog';\r\nimport Message from './Message/Message';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../commot/FormElements/FormElements\";\r\nimport {maxLengthValidator, requiredValidator} from \"../commot/Validators/Validators\";\r\n\r\n\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    let dialogs = props.state.dialogs.map( d => <Dialog id={d.id} key={d.id} name={d.name} />);\r\n\r\n    let messages = props.state.messages.map( m => <Message message={m.message} key={m.id} />)\r\n\r\n\r\n    let onSubmit = (formData) => {\r\n        props.sendNewMessage(formData.newMessage)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.dialogsWrapper}>\r\n                { dialogs }\r\n            </div>\r\n            <div className={styles.messagesWrapper}>\r\n                { messages }\r\n                <SendNewMessageFormRedux onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength10 = maxLengthValidator(10);\r\n\r\nconst SendNewMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field name='newMessage' component={Textarea} validate={[requiredValidator, maxLength10]}/></div>\r\n            <button>Send message</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst SendNewMessageFormRedux = reduxForm({ form: 'sendNewMessage '})(SendNewMessageForm);\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport Dialogs from './Dialogs';\r\n\r\n\r\nimport { addNewDialogActionCreator } from '../../redux/dialog-reducer';\r\nimport { connect } from 'react-redux';\r\nimport {withAuthRedirect} from \"../../hoc/withLoginRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        state: state.dialogPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendNewMessage: (message) => {\r\n            dispatch(addNewDialogActionCreator(message))\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n// let DialogsWithRedirect = withAuthRedirect(Dialogs)\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(DialogsWithRedirect)\r\n\r\nexport default DialogsContainer;"],"sourceRoot":""}